/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package backup;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;
import java.awt.BorderLayout;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import static backup.SearchResult.table;
import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;


/**
 *
 * @author Thimus
 */
public class RemoteDirJFrame1 extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    
    SFTPBean sftp;
    DefaultMutableTreeNode nroot,nroot1;
    private JFileChooser openFileChooser;
    public String userName;
    public String password;
    public void getConnection(SFTPBean sftp) {
        this.sftp = sftp;
        openFileChooser = new JFileChooser();
    }
    public RemoteDirJFrame1(DefaultMutableTreeNode nroot) {
        this.nroot = nroot;
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        menuBar2 = new java.awt.MenuBar();
        menu3 = new java.awt.Menu();
        menu4 = new java.awt.Menu();
        jFrame2 = new javax.swing.JFrame();
        jFrame3 = new javax.swing.JFrame();
        jFileChooser1 = new javax.swing.JFileChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        yourJtree = new javax.swing.JTree(nroot);
        jButton3 = new javax.swing.JButton();
        display = new javax.swing.JLabel();
        listFileButton = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        menu3.setLabel("File");
        menuBar2.add(menu3);

        menu4.setLabel("Edit");
        menuBar2.add(menu4);

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame3Layout = new javax.swing.GroupLayout(jFrame3.getContentPane());
        jFrame3.getContentPane().setLayout(jFrame3Layout);
        jFrame3Layout.setHorizontalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame3Layout.setVerticalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Download");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(yourJtree);

        jButton3.setText("Upload");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        listFileButton.setText("List File");
        listFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(display, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .addComponent(listFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(display, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(listFileButton)
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        
        //code to get the filePath from JTree
        
                 if(!yourJtree.isSelectionEmpty())
                 {
                     TreePath path =   yourJtree.getSelectionPath();
                     
                     String filePath = "";
                    //for(TreePath path:paths){
                     int pathCount = path.getPathCount();
                    filePath = filePath+path.getPathComponent(0).toString();
                    for(int i=1;i<pathCount-1;i++)
                    {
                        filePath = filePath+path.getPathComponent(i).toString()+"/";
                    }
            
                    filePath = filePath+path.getLastPathComponent().toString();
                    display.setText(filePath);
                   String enFileName = path.getLastPathComponent().toString();
           //choose  target directory(at local computer)
           String targetFolder = "";
           JFileChooser chooser;
           chooser = new JFileChooser(); 
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("Choose Directory");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            //
            // disable the "All files" option.
            //
            chooser.setAcceptAllFileFilterUsed(false);
            //    
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
                    targetFolder = chooser.getSelectedFile().getAbsolutePath();
                    if(sftp.downloadFile(filePath, targetFolder))
                    {
                        try {
                            display.setText("Download Success");
                            String name = path.getLastPathComponent().toString();
                            String enPath = targetFolder+"/"+name;
                            File enFile  = new File(enPath);
                            String depath = targetFolder+"/"+name.substring(0,name.length()-10);
                            File deFile = new File(depath);
                            setPassword();
                            String key = password;
                            CryptoUtils.decrypt(key, enFile, deFile);
                            enFile.delete();
                        } catch (CryptoException ex) {
                            Logger.getLogger(RemoteDirJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }   
                    else 
                        display.setText("Download Unsuceesful");
            }
            else {
                display.setText("No Target folder is selected ");
            }//}
        }
        else
                     display.setText("No file is selected to download");
                     
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(!yourJtree.isSelectionEmpty())
                 {
                     TreePath path =   yourJtree.getSelectionPath();
                     
                     String filePath = "";
                    //for(TreePath path:paths){
                     int pathCount = path.getPathCount();
                    filePath = filePath+path.getPathComponent(0).toString();
                    
                    
                    for(int i=1;i<pathCount-1;i++)
                    {
                        filePath = filePath+path.getPathComponent(i).toString()+"/";
                    }
            
                    filePath = filePath+path.getLastPathComponent().toString();
                    display.setText(filePath);
            try {
                if(sftp.deleteFile(filePath));
            } catch (SftpException ex) {
                Logger.getLogger(RemoteDirJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                update("File is deleted");
            } catch (JSchException ex) {
                Logger.getLogger(RemoteDirJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
                    
         
        }
        else
                     display.setText("No file is selected to delete");
                     
        
    }//GEN-LAST:event_jButton2ActionPerformed
   public void setPassword()
   {
       String pass = "rock and roll";
       MD5 md = new MD5();
       password = md.getMd5(pass).substring(0, 16);
   }
   
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         int returnValue = openFileChooser.showOpenDialog(this);
         if(returnValue == JFileChooser.APPROVE_OPTION){
             try {
                 display.setText(openFileChooser.getSelectedFile().getAbsolutePath());
                 //For encrypting
                 File inputFile = openFileChooser.getSelectedFile();
                 String fileName = inputFile.getName()+".encrypted";
                 File encryptedFile = new File(fileName);
                 setPassword();
                 String key = password;
                 CryptoUtils.encrypt(key, inputFile, encryptedFile);
                 
                 if(sftp.uploadFile(encryptedFile.getAbsolutePath(),"/C:/Users/Thimus/Desktop/Hell/"+fileName)) {
                     try {
                         update("upload success");
                         encryptedFile.delete();
                     } catch (JSchException ex) {
                         Logger.getLogger(RemoteDirJFrame.class.getName()).log(Level.SEVERE, null, ex);
                     }
                     
                 }
                 else {
                     try {
                         update("upload failed");
                     } catch (JSchException ex) {
                         Logger.getLogger(RemoteDirJFrame.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }
             } catch (CryptoException ex) {
                 Logger.getLogger(RemoteDirJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }

       }
       else
           display.setText("No file chosen");
               
    }//GEN-LAST:event_jButton3ActionPerformed

    public void showTableData()
{

JFrame frame1 = new JFrame("Database Search Result");
frame1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame1.setLayout(new BorderLayout());
DefaultTableModel model = new DefaultTableModel();
String[] columnNames = {"File Name","Size","Date"};

model.setColumnIdentifiers(columnNames);
JTable table = new JTable();
table.setModel(model); 
table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
table.setFillsViewportHeight(true);
JScrollPane scroll = new JScrollPane(table);
scroll.setHorizontalScrollBarPolicy(
JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

String name= "";
String date = "";
long size = 0;
int i=0;
try
{ 
    Vector<LsEntry> list = sftp.listFile("/C:/Users/Thimus/Desktop/Hell/");
    
for (LsEntry item : list)
{

name = item.getFilename();
size = item.getAttrs().getSize();
double size1 = (double)size/1024;
date = item.getAttrs().getAtimeString();
model.addRow(new Object[]{name,size1,date});
i++; 
}
if(i <1)
{
JOptionPane.showMessageDialog(null, "No Record Found","Error",
JOptionPane.ERROR_MESSAGE);
}
if(i ==1)
{
System.out.println(i+" Record Found");
}
else
{
System.out.println(i+" Records Found");
}
}
catch(Exception ex)
{
JOptionPane.showMessageDialog(null, ex.getMessage(),"Error",
JOptionPane.ERROR_MESSAGE);
}
frame1.add(scroll);
frame1.setVisible(true);
frame1.setSize(400,300);
}
    
    
    
    
    
    private void listFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listFileButtonActionPerformed
        // TODO add your handling code here:
        showTableData();
    }//GEN-LAST:event_listFileButtonActionPerformed

       private void setText(String message)
    {
        display.setText(message);
    }
    private void update(String message) throws JSchException
    {
        String remotePath = "/C:/Users/Nitish Kumar/Desktop/New Folder/server1/"; 
        nroot1 = new DefaultMutableTreeNode(remotePath);
                
                try {
                    sftp.cargarRTree(remotePath, nroot1);
                 }catch (SftpException e1) {
                // TODO Auto-generated catch block
                }
        //Logger.getLogger(SimpleLinuxGUI.class.getName()).log(Level.SEVERE, null, ex);
        RemoteDirJFrame1 frame = new  RemoteDirJFrame1(nroot1);
        frame.setText(message);
        frame.getConnection(sftp);
        frame.setVisible(true);
        this.setVisible(false);
    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RemoteDirJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RemoteDirJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RemoteDirJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RemoteDirJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        JFrame jf = new JFrame();

        //(rem.nroot);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                jf.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel display;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JFrame jFrame3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listFileButton;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.Menu menu3;
    private java.awt.Menu menu4;
    private java.awt.MenuBar menuBar1;
    private java.awt.MenuBar menuBar2;
    private javax.swing.JTree yourJtree;
    // End of variables declaration//GEN-END:variables
}
